/* ***************************************************************************

   Copyright (c): 2008 - 2015 Hericus Software, LLC.

   License: The MIT License (MIT)

   Authors: Steven M. Cherry

*************************************************************************** */

#include "TheMain.h"
#include "OdbcObj.h"
using namespace Helix::Glob;

#include "${CLASSNAME}.h"
using namespace Helix::Logic::rep;

#include "Statics.h"
#include "Replication.h"
using namespace Helix::Logic::util;

#include "UpdateMessage.h"
using namespace Helix::Logic::admin;

#include <Log.h>
#include <dptr.h>
#include <File.h>
#include <EnEx.h>
#include <Timer.h>
#include <AnException.h>
#include <XmlHelpers.h>
using namespace SLib;

// Include local data objects here
#include "GetOne${OBJNAME}.h"
using namespace Helix::Logic::${PACKAGE};

// This adds us to the global ActionClass Registry:
ActionClassRegister<${CLASSNAME}> ${CLASSNAME}::reg("${CLASSNAME}", 1, "/logic/rep/${CLASSNAME}");

// Used for auto generating the API on the javascript side:
// LOGICCODEGEN API=/logic/rep/${CLASSNAME} Input=NULL

${CLASSNAME}::${CLASSNAME}(xmlNodePtr action)
{
	EnEx ee(FL, "${CLASSNAME}::${CLASSNAME}(xmlNodePtr action)");
	
}

${CLASSNAME}::${CLASSNAME}(const ${CLASSNAME}& c)
{
	EnEx ee(FL, "${CLASSNAME}::${CLASSNAME}(const ${CLASSNAME}& c)");

}

${CLASSNAME}& ${CLASSNAME}::operator=(const ${CLASSNAME}& c)
{
	EnEx ee(FL, "${CLASSNAME}::operator=(const ${CLASSNAME}& c)");

	return *this;
}

${CLASSNAME}::~${CLASSNAME}()
{
	EnEx ee(FL, "${CLASSNAME}::~${CLASSNAME}()");

}

void ${CLASSNAME}::ExecuteRequest(IOConn& ioc)
{
	// The "true" parameter at the end here indicates to the entry/exit timing
	// mechanism that it should copy this thread's stats to the global collection.
	// This should not be done everywhere, but is appropriate to do at this point.
	EnEx ee(FL, "${CLASSNAME}::ExecuteRequest(IOConn& ioc)", true);

	// Set up the response document name
	ioc.initializeResponseDocument("${CLASSNAME}");

	ExecuteInLine( ioc );

	// Send the response back to the caller and close the connection.
	ioc.SendReturn();
	ioc.Close();
}

void ${CLASSNAME}::ExecuteInLine(IOConn& ioc)
{
	EnEx ee(FL, "${CLASSNAME}::ExecuteInLine(IOConn& ioc)");

	if(!Replication::AreWeInternalAirTime()){
		// We're not interal AirTime
		ioc.SendReturn();
		ioc.Close();
		return;
	}
	SSPApi ssp;

	// Set up the xml request document manually by using the replication helper methods
	sptr<xmlDoc, xmlFreeDoc> req( Replication::StartDoc("BulkReplicateRecv${OBJNAME}") );
	auto root = xmlDocGetRootElement( req );

	// Read from our default database - change this to get data from elsewhere
	OdbcObj& db = *ioc.getDBConnection();
	auto summary_vect = ${OBJNAME}::selectAll( db );

	Timer t;
	int total = 0;
	int count = 0;
	int errorCount = 0;
	t.Start();
	for(auto o : *summary_vect){
		dptr<${OBJNAME}> fullObj( GetOne${OBJNAME}::Get${OBJNAME}( ioc, o->Id ) );
		fullObj->createXmlNode( root );
		count ++;
		total ++;
		if(count == 100){ // Send 100 objects in each batch
			try {
				Replication::PushToSSP( ssp, "/logic/rep/BulkReplicateRecv${OBJNAME}", req );
			} catch (AnException&){
				errorCount ++;
				if(errorCount > 10){
					ERRORL(FL, "${CLASSNAME}::Execute - Too many errors");
					break;
				}
			}

			// Clear out the Xml Document - create a new one
			req = Replication::StartDoc("BulkReplicateRecv${OBJNAME}");
			root = xmlDocGetRootElement( req );
			count = 0;
		}
	}

	if(count > 0 && errorCount <= 10){
		// Send any last items to SSP
		try {
			Replication::PushToSSP( ssp, "/logic/rep/BulkReplicateRecv${OBJNAME}", req );
		} catch (AnException&){
		}
	}

	t.Finish();
	twine msg; msg.format("${CLASSNAME} - Pushed %d Records in %f seconds.", total, t.Duration() );
	UpdateMessage::InsertMessage(db, "/logic/rep/${CLASSNAME}", msg );
}

