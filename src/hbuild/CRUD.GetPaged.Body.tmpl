/* ***************************************************************************

   Copyright (c): 2008 - 2015 Hericus Software, LLC.

   License: The MIT License (MIT)

   Authors: Steven M. Cherry

*************************************************************************** */

#include "TheMain.h"
#include "OdbcObj.h"
using namespace Helix::Glob;

#include "${CLASSNAME}.h"
using namespace Helix::Logic::${PACKAGE};

#include "Statics.h"
#include "PageQuery.h"
using namespace Helix::Logic::util;

#include <Log.h>
#include <dptr.h>
#include <File.h>
#include <EnEx.h>
#include <AnException.h>
#include <XmlHelpers.h>
using namespace SLib;

// Include local data objects here
#include "PageTracker.h"
#include "${OBJNAME}.h"

// This adds us to the global ActionClass Registry:
ActionClassRegister<${CLASSNAME}> ${CLASSNAME}::reg("${CLASSNAME}", 1, 
	"/logic/${PACKAGE}/${CLASSNAME}",
	"/logic/${PACKAGE}/${CLASSNAME}Count"
);

// Used for auto generating the API on the javascript side:
// LOGICCODEGEN API=/logic/${PACKAGE}/${CLASSNAME} Input=PageTracker
// LOGICCODEGEN API=/logic/${PACKAGE}/${CLASSNAME}Count Input=PageTracker

${CLASSNAME}::${CLASSNAME}(xmlNodePtr action)
{
	EnEx ee(FL, "${CLASSNAME}::${CLASSNAME}(xmlNodePtr action)");
	
}

${CLASSNAME}::${CLASSNAME}(const ${CLASSNAME}& c)
{
	EnEx ee(FL, "${CLASSNAME}::${CLASSNAME}(const ${CLASSNAME}& c)");

}

${CLASSNAME}& ${CLASSNAME}::operator=(const ${CLASSNAME}& c)
{
	EnEx ee(FL, "${CLASSNAME}::operator=(const ${CLASSNAME}& c)");

	return *this;
}

${CLASSNAME}::~${CLASSNAME}()
{
	EnEx ee(FL, "${CLASSNAME}::~${CLASSNAME}()");

}

void ${CLASSNAME}::ExecuteRequest(IOConn& ioc)
{
	// The "true" parameter at the end here indicates to the entry/exit timing
	// mechanism that it should copy this thread's stats to the global collection.
	// This should not be done everywhere, but is appropriate to do at this point.
	EnEx ee(FL, "${CLASSNAME}::ExecuteRequest(IOConn& ioc)", true);

	// How were we called?
	bool doingCount = false;
	if(strcmp((const char*)ioc.GetRequestRoot()->name, "${CLASSNAME}Count") == 0){
		doingCount = true;
	}

	// Set up the response document name
	if(doingCount){
		ioc.initializeResponseDocument("${CLASSNAME}Count");
	} else {
		ioc.initializeResponseDocument("${CLASSNAME}");
	}

	// Pick up the PageTracker object from the request document
	PageTracker local( XmlHelpers::FindChild( ioc.GetRequestRoot(), PageTracker::Name()() ) );

	// Make sure our sort criteria is not empty - this should be the default sort order for the display
	if(local.SortBy.empty()){
		local.SortBy = "Id"; // FIXME
	}
	auto searchFields = ${OBJNAME}::GetSearchFields();
	PageQuery<${OBJNAME}, ${OBJNAME}_svect> query(ioc, local, searchFields.get());

	// If you need to adjust anything before running the queries - do it here.

	// Run the query - this also populates the return data on ioc
	query.RunQuery( doingCount, *ioc.getDBConnection() ); // Change to getTTDB if required

	// Send the response back to the caller and close the connection.
	ioc.SendReturn();
	ioc.Close();
}

