/* ******************************************************************************** */
/* This file is generated once, and then can be edited safely.  Future calls to     */
/* generate this test object will not overwrite this test header.                   */
/* ******************************************************************************** */

#include "${shortName}.h"
using namespace Helix::Logic::${shortPackage};

${shortName} ${shortName}_CreateTestObj1()
{
	dptr<IOConn> ioc( TestStatics::GetNormalConn() );
	OdbcObj& db = *ioc->getDBConnection(); // use this for any lookups required

	${shortName} ret;
	// Fill out the details of the object here

${TestPopulateMemberData}

	// If you need to populate child objects you can follow this pattern
	/*
	// Add a few children
	for(size_t i = 0; i < 10; i++){
		auto c = new FIXMEChildObjectName();
		c->FIXMEValue = something;
		ret.FIXMEChildVectorName->push_back( c );
	}
	*/

	ret.Validate(); // Make sure everything is good
	return ret;
}

${shortName} ${shortName}_CreateTestObj2()
{
	// Use CreateTestObj1 to get the core object created
	${shortName} ret( ${shortName}_CreateTestObj1() ); 

	// Adjust anything here to make it different

	ret.Validate(); // Make sure everything is good
	return ret;
}

${shortName} ${shortName}_CreateTestObj3()
{
	// Use CreateTestObj1 to get the core object created
	${shortName} ret( ${shortName}_CreateTestObj1() ); 

	// Adjust anything here to make it different

	ret.Validate(); // Make sure everything is good
	return ret;
}

void ${shortName}_ModifyObject(${shortName}& obj)
{
	dptr<IOConn> ioc( TestStatics::GetNormalConn() );
	OdbcObj& db = *ioc->getDBConnection(); // use this for any lookups required

	// Make any modifications to the data to prepare for an Update test
	// e.g:
	// obj.Description += " - Update";

	// If you have child vectors, you can follow this pattern to test both the
	// delete of existing children and the insert of new ones
	/*
	// Remove some children
	REQUIRE(obj.FIXMEChildVectorName->size() > 5);
	for(size_t i = 0; i < 5; i++){
		delete obj.FIXMEChildVectorName->at( 0 ); // delete the object itself
		obj.FIXMEChildVectorName->erase( obj.FIXMEChildVectorName->begin() ); // remove the object from the vector
	}

	// Add a few more children
	for(size_t i = 0; i < 10; i++){
		auto c = new FIXMEChildObjectName();
		c->FIXMEValue = something;
		obj.FIXMEChildVectorName->push_back( c );
	}
	*/

	obj.Validate(); // Make sure everything is good

}

void ${shortName}_CompareWithoutId(${shortName}& obj1, ${shortName}& obj2, bool compareChildren)
{
	// Compare all fields except the Id field - adjust this list as required
${TestRequireCompareWithoutId}

	if(compareChildren){
		// Compare any child objects here using the following pattern
		/*
		REQUIRE(obj1.FIXMEChildVectorName->size() == obj2.FIXMEChildVectorName->size());
		for(auto c1 : *obj1.FIXMEChildVectorName){
			FIXMEChildObjectName* c2 = nullptr;
			for(auto c : *obj2.FIXMEChildVectorName){
				if(c->FIXMEUniqueId == c1->FIXMEUniqueId){
					c2 = c;
					break;
				}
			}
			REQUIRE(c2 != nullptr);
			REQUIRE(c1->FIXMEOtherFieldToCompare == c2->FIXMEOtherFieldToCompare);
		}
		*/

	}
}

void ${shortName}_CompareWithId(${shortName}& obj1, ${shortName}& obj2, bool compareChildren)
{
	// Compare all fields without the Id first
	${shortName}_CompareWithoutId( obj1, obj2, compareChildren );

	// Then also compare the Id field:
	REQUIRE( obj1.Id == obj2.Id );
}

bool ${shortName}_MatchesCrudObj(${shortName}& obj1, ${shortName}& obj2)
{
	// Compare all fields required
${TestCompareAllFields}

	// If everything compared correctly, then return true
	return true;
}

