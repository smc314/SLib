/* ***************************************************************************

   Copyright (c): 2008 - 2015 Hericus Software, LLC.

   License: The MIT License (MIT)

   Authors: Steven M. Cherry

*************************************************************************** */

#include "TheMain.h"
#include "OdbcObj.h"
using namespace Helix::Glob;

#include "${CLASSNAME}.h"
using namespace Helix::Logic::rep;

#include "Statics.h"
#include "Replication.h"
using namespace Helix::Logic::util;

#include "UpdateMessage.h"
using namespace Helix::Logic::admin;

#include <Log.h>
#include <dptr.h>
#include <File.h>
#include <EnEx.h>
#include <AnException.h>
#include <XmlHelpers.h>
using namespace SLib;

// Include local data objects here
#include "Update${OBJNAME}.h"
using namespace Helix::Logic::${PACKAGE};

// This adds us to the global ActionClass Registry:
ActionClassRegister<${CLASSNAME}> ${CLASSNAME}::reg("${CLASSNAME}", 1, "/logic/rep/${CLASSNAME}");

// Used for auto generating the API on the javascript side:
// LOGICCODEGEN API=/logic/rep/${CLASSNAME} Input=${OBJNAME}

${CLASSNAME}::${CLASSNAME}(xmlNodePtr action)
{
	EnEx ee(FL, "${CLASSNAME}::${CLASSNAME}(xmlNodePtr action)");
	
}

${CLASSNAME}::${CLASSNAME}(const ${CLASSNAME}& c)
{
	EnEx ee(FL, "${CLASSNAME}::${CLASSNAME}(const ${CLASSNAME}& c)");

}

${CLASSNAME}& ${CLASSNAME}::operator=(const ${CLASSNAME}& c)
{
	EnEx ee(FL, "${CLASSNAME}::operator=(const ${CLASSNAME}& c)");

	return *this;
}

${CLASSNAME}::~${CLASSNAME}()
{
	EnEx ee(FL, "${CLASSNAME}::~${CLASSNAME}()");

}

void ${CLASSNAME}::ExecuteRequest(IOConn& ioc)
{
	// The "true" parameter at the end here indicates to the entry/exit timing
	// mechanism that it should copy this thread's stats to the global collection.
	// This should not be done everywhere, but is appropriate to do at this point.
	EnEx ee(FL, "${CLASSNAME}::ExecuteRequest(IOConn& ioc)", true);

	ioc.initializeResponseDocument("${CLASSNAME}");

	// Pick up the input objects from the request document
	auto v = ${OBJNAME}::readXmlChildren( ioc.GetRequestRoot() );
	for(auto o : *v){
		try {
			Update${OBJNAME} updater( nullptr ); // xmlNodePtr passed in is not used
			updater.ExecuteInLine( ioc, *o, false );
		} catch (AnException& e){
			WARN(FL, "Bulk Replication Error: %s", e.Msg() );
		}
	}

	// Send the response back to the caller and close the connection.
	ioc.SendReturn();
	ioc.Close();
}

