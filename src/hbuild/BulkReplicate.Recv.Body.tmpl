/* ***************************************************************************

   Copyright (c): 2008 - 2015 Hericus Software, LLC.

   License: The MIT License (MIT)

   Authors: Steven M. Cherry

*************************************************************************** */

#include "TheMain.h"
#include "OdbcObj.h"
using namespace Helix::Glob;

#include "${CLASSNAME}.h"
using namespace Helix::Logic::rep;

#include "Statics.h"
#include "Replication.h"
using namespace Helix::Logic::util;

#include "UpdateMessage.h"
using namespace Helix::Logic::admin;

#include <Log.h>
#include <dptr.h>
#include <File.h>
#include <EnEx.h>
#include <AnException.h>
#include <XmlHelpers.h>
using namespace SLib;

// Include local data objects here
#include "Update${OBJNAME}.h"
using namespace Helix::Logic::${PACKAGE};

// This adds us to the global ActionClass Registry:
ActionClassRegister<${CLASSNAME}> ${CLASSNAME}::reg("${CLASSNAME}", 1, "/logic/rep/${CLASSNAME}");

// Used for auto generating the API on the javascript side:
// LOGICCODEGEN API=/logic/rep/${CLASSNAME} Input=${OBJNAME}

${CLASSNAME}::${CLASSNAME}(xmlNodePtr action)
{
	EnEx ee(FL, "${CLASSNAME}::${CLASSNAME}(xmlNodePtr action)");
	
}

${CLASSNAME}::${CLASSNAME}(const ${CLASSNAME}& c)
{
	EnEx ee(FL, "${CLASSNAME}::${CLASSNAME}(const ${CLASSNAME}& c)");

}

${CLASSNAME}& ${CLASSNAME}::operator=(const ${CLASSNAME}& c)
{
	EnEx ee(FL, "${CLASSNAME}::operator=(const ${CLASSNAME}& c)");

	return *this;
}

${CLASSNAME}::~${CLASSNAME}()
{
	EnEx ee(FL, "${CLASSNAME}::~${CLASSNAME}()");

}

void ${CLASSNAME}::ExecuteRequest(IOConn& ioc)
{
	// The "true" parameter at the end here indicates to the entry/exit timing
	// mechanism that it should copy this thread's stats to the global collection.
	// This should not be done everywhere, but is appropriate to do at this point.
	EnEx ee(FL, "${CLASSNAME}::ExecuteRequest(IOConn& ioc)", true);

	ioc.initializeResponseDocument("${CLASSNAME}");

	// Pick up the input objects from the request document
	auto v = ${OBJNAME}::readXmlChildren( ioc.GetRequestRoot() );
	for(auto o : *v){
		// For object types that have a unique key like name, employee#, etc.  Check here to make sure that
		// if the object exists locally, but has a different Id, then we switch the Id in our local system
		// to match what the remote system is telling us it should be.  If this doesn't make sense for this
		// object type - just remove this.
		CheckIdAndUniqueKey( ioc, o );

		try {
			Update${OBJNAME} updater( nullptr ); // xmlNodePtr passed in is not used
			updater.ExecuteInLine( ioc, *o, false );
		} catch (AnException& e){
			WARN(FL, "Bulk Replication Error: %s", e.Msg() );
		}
	}

	// Send the response back to the caller and close the connection.
	ioc.SendReturn();
	ioc.Close();
}

void ${CLASSNAME}::CheckIdAndUniqueKey(IOConn& ioc, ${OBJNAME}* obj)
{
	EnEx ee(FL, "${CLASSNAME}::CheckIdAndUniqueKey(IOConn& ioc, ${OBJNAME}* obj)");

	OdbcObj& db = *ioc.getDBConnection();

	// Look up the Object by Unique Key 
	auto v = ${OBJNAME::selectByFIXME( db, obj->FIXME );
	if(v->size() == 0){
		return; // needs to be inserted
	}
	// if it exists, check the Id
	if(Statics::IdMatch( obj->Id, v->at(0)->Id )){
		return; // Id's match - just do the normal update
	}

	// The object exists, but the Id's don't match.  Need to fix the local Id to match what the
	// calling system is telling us it should be
	Transaction trans(db);

	// Step 1 - create a temporary record as a place-holder
	${OBJNAME} tmpObj;
	// Fill out enough to get a record inserted
	tmpObj.FIXME1 = "SizeForNothing";
	tmpObj.FIXME2 = "SizeForNothing";
	tmpObj.FIXME3 = "SizeForNothing";
	tmpObj.Id = ${OBJNAME}::insert( db, tmpObj );

	// Step 2 - shift the related objects to point to the tmp record
	${OBJNAME}::shiftRelatedRecord1( db, tmpObj.Id, v->at(0)->Id );
	${OBJNAME}::shiftRelatedRecord2( db, tmpObj.Id, v->at(0)->Id );
	${OBJNAME}::shiftRelatedRecord3( db, tmpObj.Id, v->at(0)->Id );
	${OBJNAME}::shiftRelatedRecord4( db, tmpObj.Id, v->at(0)->Id );

	// Step 3 - Update the Id of the local ${OBJNAME} to match the remote one
	${OBJNAME}::changeId( db, obj->Id, v->at(0)->Id );

	// Step 4 - Point the related objects back to the original record with the new Id
	${OBJNAME}::shiftRelatedRecord1( db, obj->Id, tmpObj.Id );
	${OBJNAME}::shiftRelatedRecord2( db, obj->Id, tmpObj.Id );
	${OBJNAME}::shiftRelatedRecord3( db, obj->Id, tmpObj.Id );
	${OBJNAME}::shiftRelatedRecord4( db, obj->Id, tmpObj.Id );

	// Step 5 - Remove the tmp record used
	${OBJNAME}::deleteById( db, tmpObj.Id );

	// Commit the transaction
	trans.CommitAndEnd();
}

/* The SQL required to support the above calls will look something like this:

	<SqlStatement methodName="shiftRelatedRecord1" methodType="UPDATE" target="odbc" outputCol="">
		<Comment>Used when adjusting the Id of a ${OBJNAME} record</Comment>
		<Sql>update RelatedRecordFIXME set ${OBJNAME}Id = ? where ${OBJNAME}Id = ?
		</Sql>
		<Input name="NewId" type="guid"/>
		<Input name="OldId" type="guid"/>
	</SqlStatement>
	<SqlStatement methodName="shiftRelatedRecord2" methodType="UPDATE" target="odbc" outputCol="">
		<Comment>Used when adjusting the Id of a ${OBJNAME} record</Comment>
		<Sql>update RelatedRecordFIXME set ${OBJNAME}Id = ? where ${OBJNAME}Id = ?
		</Sql>
		<Input name="NewId" type="guid"/>
		<Input name="OldId" type="guid"/>
	</SqlStatement>

	<SqlStatement methodName="changeId" methodType="UPDATE" target="odbc" outputCol="">
		<Comment>Changes the Id for a given record</Comment>
		<Sql>update ${OBJNAME}s set Id = ? where Id = ?
		</Sql>
		<Input name="NewId" type="guid"/>
		<Input name="OldId" type="guid"/>
	</SqlStatement>

*/



